[ . misc/macro/isa/x86_64 ]

Magic:
	90				# nop

Start:
	# Abort if argc is not 2.
	59				# pop %rcx
	48 83 f9 02			# cmp $2, %rcx
	75 [ rel8 Abort ]		# jnz Abort

	# Clear the counting registers.
	48 31 c0			# xor %rax, %rax
	48 31 c9			# xor %rcx, %rcx

	# Skip argv[0] and parse argv[1].
	5e				# pop %rsi
	5e				# pop %rsi

ParseSeconds:
	# Read the next character.
	ac				# lodsb

	# NUL terminator?
	84 c0				# test %al, %al
	74 [ rel8 Sleep ]		# jz Sleep

	# Abort if it's not a digit.
	3c 30				# cmp $'0', %al
	7c [ rel8 Abort ]		# jl Abort
	3c 39				# cmp $'9', %al
	7f [ rel8 Abort ]		# jg Abort

	# Accumulate.
	2c 30				# sub $0x30, %al
	48 6b c9 0a			# imul $10, %rcx
	48 01 c1			# add %rax, %rcx

	# Continue.
	eb [ rel8 ParseSeconds ]	# jmp ParseSeconds

Sleep:
	# Chuck the seconds into a request.
	48 8d 3d [ rel32 Request ]	# lea Request(%rip), %rdi
	48 89 0f			# mov %rcx, (%rdi)

	# nanosleep(&Request, NULL);
	48 31 f6			# xor %rsi, %rsi
	6a 23				# push $SYS_NANOSLEEP
	58				# pop %rax
	0f 05				# syscall

Quit:
	6a 00				# push $EXIT_SUCCESS
	eb [ rel8 Exit ]		# jmp Exit

Abort:
	6a 01				# push $EXIT_FAILURE

Exit:
	5f				# pop %rdi
	6a 3c				# push $SYS_EXIT
	58				# pop %rax
	0f 05				# syscall
	
Request:
