#!/bin/sh

ENCODE=0
INTERPRET=1

error()
{
	printf "%08x: %s\n" ${OFFSET} "$1" >&2
}

byte()
{
	if [ $PASS -eq 2 ]
	then
		printf $(printf "\%03o" $(($1 & 0xff)))
	fi

	OFFSET=$((OFFSET + 1))
}

u8()
{
	for value
	do
		byte $value
	done
}

u16le()
{
	for value
	do
		u8 $value $((value >> 8))
	done
}

u16be()
{
	for value
	do
		u8 $((value >> 8)) $value
	done
}

u32le()
{
	for value
	do
		u16le $value $((value >> 16))
	done
}

u32be()
{
	for value
	do
		u16be $((value >> 16)) $value
	done
}

u64le()
{
	for value
	do
		u32le $value $((value >> 32))
	done
}

u64be()
{
	for value
	do
		u32be $((value >> 32)) $value
	done
}

resolve()
{
	if [ $PASS -eq 1 ]
	then
		printf 0
		return
	fi

	local token=$1

	set -- $LABELS

	while [ $# -ge 2 ]
	do
		local label=$1
		local offset=$2
		shift 2

		if [ $label = $token ]
		then
			printf $offset
			return	
		fi
	done

	printf $token
}

label()
{
	LABELS="$1 $OFFSET ${LABELS}"
}

macro()
{
	local token=$1
	shift 1

	MACROS="$token $MACROS"
	eval "${token}() { $@; }"
}

callable()
{
	local token=$1

	set -- $MACROS

	for macro
	do
		if [ $macro = $token ]
		then
			return 0
		fi
	done

	return 1
}

interpret()
{
	local token=$1
	shift 1

	if ! callable $token
	then
		error "unrecognized token: $token"
		exit 1
	fi

	$token $@
}

evaluate()
{
	for token
	do
		case $MODE in
		$ENCODE)
			case $token in
			'#')
				break
				;;
			'[')
				MODE=$INTERPRET
				;;
			*:)
				label ${token%%:}
				;;
			[0-f][0-f])
				byte 0x${token}
				;;
			esac
			;;
		$INTERPRET)
			case $token in
			']')
				interpret ${EXPRESSION}
				EXPRESSION=
				MODE=$ENCODE
				;;
			*)
				EXPRESSION="${EXPRESSION} ${token}"
				;;
			esac
			;;
		esac

		if [ $PASS -eq 1 ]
		then
			TOKENS="${TOKENS} ${token}"
		fi
	done
}

encode()
{
	MACROS="macro ."
	PASS=1
	OFFSET=0
	MODE=$ENCODE
	TOKENS=

	while read line
	do
		evaluate $line
	done

	MACROS="macro ."
	PASS=2
	OFFSET=0
	MODE=$ENCODE

	evaluate $TOKENS
}

encode
