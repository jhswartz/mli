[ . x86 ]

Start:
	# Gather and decrement argc.
	59				# pop rcx
	48 ff c9			# dec rcx
	
	# Abort if argc is now less than 1.
	48 83 f9 01			# cmp 1 rcx
	7c [ rel8 Abort ]		# jl Abort
	
	# Skip over mli's program name.
	48 83 c4 08			# add 8, rsp
	48 8b 3c 24			# mov (rsp) rdi
	
	# Stash the argument count on the stack.
	51				# push rcx
	
Open:
	# open(argv[1], O_RDONLY);
	6a 00				# push O_RDONLY
	5e				# pop rsi
	6a 02				# push SYS_OPEN
	58				# pop rax
	0f 05				# syscall
	
	# Abort on failure.
	48 85 c0			# test %rax, %rax
	78 [ rel8 Abort ]		# js Abort
	
	# Move the descriptor to r8 for mmap(2).
	49 89 c0			# mov rax r8
	
	# Allocate 144 bytes on the stack for a stat structure.
	66 81 ec 90 00			# sub 144 sp
	
GetFileSize:
	# fstat(descriptor, &stat);
	48 89 e6			# mov rsp, rsi
	48 89 c7			# mov rax, rdi
	6a 05				# push SYS_FSTAT
	58				# pop rax
	0f 05				# syscall
	
	# Abort on failure.
	48 85 c0			# test rax rax
	75 [ rel8 Abort ]		# jnz Abort
	
	# Obtain the size of the file at offset 48.
	48 83 c6 30			# add 48 rsi
	48 8b 36			# mov (rsi) rsi
	
	# Deallocate the stack space granted to stat.
	66 81 c4 90 00			# add 144 sp
	
MapFile:
	# mmap(NULL, size, prot, flags, descriptor, 0);
	4d 31 c9			# xor r9 r9
	6a 02				# push MAP_PRIVATE
	41 5a				# pop r10
	6a 07				# push PROT_READ|PROT_WRITE|PROT_EXEC
	5a				# pop rdx
	48 31 ff			# xor rdi rdi
	6a 09				# push SYS_MMAP
	58				# pop rax
	0f 05				# syscall
	
	# Abort on failure.
	48 85 c0			# test rax rax
	78 [ rel8 Abort ]		# js Abort
	
RunProgram:
	ff e0				# jmp rax

Abort:
	6a 01				# push EXIT_FAILURE
	5f				# pop rdi
	6a 3c				# push SYS_EXIT
	58				# pop rax
	0f 05				# syscall
